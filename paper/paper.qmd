---
title: "Total Team Spending and Profitability Results in a Higher League Ranking in the English Premier League"
subtitle: "An Analysis of Economic Predictors on League Rank in the 2023-2024 Season"
author: 
  - Isabella MacLean
thanks: "Code and data are available at: https://github.com/Bellamaclean7/English_Premier_League_Economic
_Predictors_on_League_Rank_2023-2024_Season.git."
date: today
date-format: long
abstract: "This paper uses a linear regression model to predict English Premier League teams rank in the standings based on three explanatory variables: match attendance, total payroll, and market value. Utilizing R's lm function, this paper analyzes the relationship between these variables and teams total points accumulated during the English Premier League 2023-2024 season. Findings suggest that each explanatory variable significantly influences a team's league position (total points), highlighting the association between team success and team wealth."
format: pdf
toc: true
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(tidyverse)
library(dplyr)
library(corrplot)
library(dplyr)
library(knitr)
library(readr)
library(here)
library(kableExtra)
library(scales)
library(ggplot2)
library(rstanarm)
library(ggrepel)

analysis_data <- read_csv(here::here("data/analysis_data/analysis_data.csv"))
show_col_types = FALSE

matchday_attendance <- read_csv(here::here("data/raw_data/average_home_matchday_attendance_2023-2024.csv"))
show_col_types = FALSE

market_value <- read_csv(here::here("data/raw_data/market_value_2023-2024.csv"))
show_col_types = FALSE

team_rank <- read_csv(here::here("data/raw_data/team_rank_2023-2024.csv"))
show_col_types = FALSE

total_payroll <- read_csv(here::here("data/raw_data/total_payroll_2023-2024.csv"))
show_col_types = FALSE

total_transfer_spending <- read_csv(here::here("data/raw_data/total_transfer_spending_2023-2024.csv"))
show_col_types = FALSE
```


# Introduction

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....

You can and should cross-reference sections and sub-sections. We use @citeR and @rohan.

The remainder of this paper is structured as follows. @sec-data....

# Data {#sec-data}

Data was collected and analyzed using the statistical programming software R [@citeR], with additional support from `tidyverse` [@tidyverse2023], `ggplot2` [@ggplot22023], `dplyr` [@dplyr2023], `readr` [@readr2023], `KableExtra` [@kableExtra2023], `knitr` [@knitr2023], `rstanarm` [@rstanarm2023], and `corrplot` [@corrplot2023].

The analysis dataset used for this paper is comprised of five datasets that were compiled during the data cleaning process. The first dataset, @tbl-1, contains every teams average home matchday attendance for the 2023-2024 season, which was collected from @footballwebpages2023premierleague. The second dataset, @tbl-2, contains every teams current market value, which was collected from @transfermarkt2023premierleague. The third dataset, @tbl-3, contains the current total payroll for each team in the English Premier League, and was collected from @spotrac2023eplpayroll. The forth dataset, @tbl-4, contains the total amount spent in transfer fees prior to the start of the 2023-2024 season for each team in the English Premier League, and was collected from @spotrac2023epltransferfees. The final dataset, @tbl-5, contains the total points earned by each team in the English Premier League during the 2023-2024 as of Matchday 33, and was retrieved from @transfermarkt2023premierleaguematchday30.

```{r}
#| label: tbl-1
#| tbl-cap: The dataset containing average home matchday attendance for each team in the English Premier League during the 2023-2024 season.
#| echo: false
#| warning: false

# Assigning new column names to the dataframe
colnames(matchday_attendance) <- c("Team", "Home Matchday Attendance")

# Ensure that the "Home Matchday Attendance" column is numeric for formatting
matchday_attendance$`Home Matchday Attendance` <- as.numeric(matchday_attendance$`Home Matchday Attendance`)

# Format the "Home Matchday Attendance" column to include commas
matchday_attendance$`Home Matchday Attendance` <- comma(matchday_attendance$`Home Matchday Attendance`)

# Generate the table with adjusted font size to fit the page
kable(matchday_attendance, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 8)
```

```{r, results='asis'}
#| label: tbl-2
#| tbl-cap: The dataset containing the current market value of each team in the English Premier League.
#| echo: false
#| warning: false

# Assigning new column names to the dataframe
colnames(market_value) <- c("Team", "Market Value")

# Function to format values in billions and millions
format_value <- function(value) {
  if (value >= 1) {
    # Value is in billions
    return(paste0("£", formatC(value, format = "f", digits = 2), "B"))
  } else {
    # Value is in millions
    # Convert to millions (e.g., 0.9 becomes 900)
    million_value <- value * 1000
    return(paste0("£", round(million_value), "M"))
  }
}

# Apply the function to every market value
market_value$`Market Value` <- sapply(market_value$`Market Value`, format_value)

# Generate the table with adjusted font size to fit the page
kable(market_value, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 8)
```

```{r}
#| label: tbl-3
#| tbl-cap: The dataset containing the current total payroll for each team in the English Premier League.
#| echo: false
#| warning: false

# Assigning new column names to the dataframe
colnames(total_payroll) <- c("Team", "Active Players", "Forwards", "Midfielders", "Defensmen", "Goalkeepers", "Total")

# Generate the table with adjusted font size to fit the page
kable(total_payroll, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 8)
```

```{r}
#| label: tbl-4
#| tbl-cap: The dataset containing the total amount spent in transfer fees prior to the start of the 2023-2024 season for each team in the English Premier League.
#| echo: false
#| warning: false

# Assigning new column names to the dataframe
colnames(total_transfer_spending) <- c("Team", "Total Transfer Fees")
                             
# Generate the table with adjusted font size to fit the page
kable(total_transfer_spending, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 8)
```

```{r}
#| label: tbl-5
#| tbl-cap: The dataset containing the total points earned by each team in the English Premier League during the 2023-2024 as of Matchday 30.
#| echo: false
#| warning: false

# Assigning new column names to the dataframe
colnames(team_rank) <- c("Team", "Points")
                             
# Generate the table with adjusted font size to fit the page
kable(team_rank, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 8)
```

The datasets were then combined during the cleaning process to create one master dataset for analysis. The merging process was conducted on the common column `team`, ensuring that data from each dataset corresponding to a specific team was consolidated into a single row within the analysis dataset. This methodology allowed for a unified view of each team's `matchday attendance`, `market value`, `total team points`, `total payroll`, and `total transfer spending`, facilitating a multifaceted analysis of team performance and financial metrics.

As part of the data cleaning process, specific columns containing numeric values but stored as character strings—due to the inclusion of commas as thousands separators and currency symbols—were converted to their appropriate numeric data types. This conversion involved stripping the character columns 'average_home_matchday_attendance', 'total_wage_bill', and 'transfer_fees' of non-numeric characters (i.e., commas and the pound sterling symbol) and then casting them to integer or numeric types as contextually appropriate, as well as applying the same scaling methods to each variable. This step was essential for enabling quantitative analysis of these variables.

Furthermore, to streamline the dataset and focus the analysis on key variables of interest, certain columns deemed extraneous to the core analytical objectives were removed. These included detailed payroll information per position (`forwards`, `midfielders`, `defensmen`, `goalkeepers`) and the column `active.players`. The removal of these columns served to reduce the dataset's complexity, facilitating a more focused and manageable analysis of the relationships between team performance metrics and financial expenditures.

The resulting dataset for analysis is shown in @tbl-6.

```{r}
#| label: tbl-6
#| tbl-cap: The dataset containing the total points earned by each team in the English Premier League during the 2023-2024 as of Matchday 33.
#| echo: false
#| warning: false

# Creating a temporary copy of the dataframe for table presentation
table_data <- analysis_data

# Specifying new column names for the table aesthetics
names(table_data) <- c("Team", "Home Matchday Attendance", "Market Value", "Points", "Total Payroll", "Total Transfer Fees")

# Generate the table with adjusted column names and font size
kable(table_data, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 8)
```

The analysis dataset has 6 columns:

1. The `Team` column, which denotes the name of each football club in the English Premier League.
2. The `Home Matchday Attendance` column, which denotes the average number of spectators attending home matches of the football club. This helps understand the club's popularity, fan base size, and infrastructure. 
3. The `Market Value` column, which represents the total market value of the team in billions of pounds. It indicates the financial strength and quality of the club.
4. The `Points` column, which represents the total points a team has accumulated over the season in the league. Points are awarded based on wins and draws. 
5. The `Total Payroll` column, which details the total annual wages paid by the club to its players, given in pounds. It reflects the financial commitment of the club towards its playing squad.
6. The `Total Transfer Fees` column, which denotes the total amount spent by the club on transfer fees in pounds during the transfer window for the given year. It indicates the club's investment in new players for the season.

From here I began examining the relationships between English Premier League teams' league performance (expressed in points accumulated) and various financial indicators during the 2023-2024 season. The following four graphs (@fig-pts_vs_average_home_matchday_attendance, @fig-pts_vs_total_wage_bill, @fig-pts_vs_market_value, and @fig-pts_vs_transfer_fees) presents a scatter plot paired with a linear regression trend line to evaluate the correlation between league points and one of the four key economic metrics presented in @tbl-6.

```{r fig.width=6,fig.height=3,fig.cap=8}
#| warning: false
#| echo: false
#| label: fig-pts_vs_average_home_matchday_attendance
#| fig-cap: Scatter plot illustrating the relationship between total league points and average matchday attendance during the 2023-2024 season.

# Calculate correlation coefficient for league position and average attendance
cor_attendance <- cor(analysis_data$pts, analysis_data$average_home_matchday_attendance, use = "complete.obs")

# Create a scatter plot for league position and average attendance
ggplot(analysis_data, aes(x = pts, y = average_home_matchday_attendance)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(size = 10),  
        plot.subtitle = element_text(size = 8),  
        axis.title.x = element_text(size = 8),
        axis.title.y = element_text(size = 8)
  ) +
  labs(title = "Average Matchday Attendance in Relation to League Position",
       subtitle = sprintf("Correlation coefficient: %.15f", cor_attendance),
       x = "Total League Points",
       y = "Average Attendance"
  )
```


```{r fig.width=6,fig.height=3,fig.cap=10}
#| warning: false
#| echo: false
#| label: fig-pts_vs_total_wage_bill
#| fig-cap: Scatter plot depicting the association between total league points and the total payroll for teams in the 2023-2024 season.

# Calculate correlation coefficient for league position and average total wages
cor_wages <- cor(analysis_data$pts, analysis_data$total_wage_bill, use = "complete.obs")

# Create a scatter plot for league position and average total wages
ggplot(analysis_data, aes(x = pts, y = total_wage_bill)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(size = 10),  
      plot.subtitle = element_text(size = 8),  
      axis.title.x = element_text(size = 8),  
      axis.title.y = element_text(size = 8)
  ) +
  labs(title = "Total Payroll in Relation to League Point",
       subtitle = paste("Correlation coefficient:", cor_wages),
       x = "Total League Points",
       y = "Total Payroll")
```

```{r fig.width=6,fig.height=3,fig.cap=10}
#| warning: false
#| echo: false
#| label: fig-pts_vs_market_value
#| fig-cap: Scatter plot demonstrating the correlation between the current market value of teams and their accumulated league points for the 2023-2024 season.

# Calculate correlation coefficient for league position and market value
cor_market <- cor(analysis_data$pts, analysis_data$market_value, use = "complete.obs")

# Create a scatter plot for league position and market value
ggplot(analysis_data, aes(x = pts, y = market_value)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(size = 10),  
    plot.subtitle = element_text(size = 8),  
    axis.title.x = element_text(size = 8),  
    axis.title.y = element_text(size = 8)
  ) +
  labs(title = "Current Market Value in Relation to League Points",
       subtitle = paste("Correlation coefficient:", cor_market),
       x = "Total League Points",
       y = "Total Market Value")
```


```{r fig.width=6,fig.height=3,fig.cap=10}
#| warning: false
#| echo: false
#| label: fig-pts_vs_transfer_fees
#| fig-cap: Scatter plot illustrating the relationship between teams total transfer spending and their corresponding league points for the 2023-2024 season. 
# Calculate correlation coefficient for league position and total transfer fees
cor_transfers <- cor(analysis_data$pts, analysis_data$transfer_fees, use = "complete.obs")

# Create a scatter plot for league position and average total wages
ggplot(analysis_data, aes(x = pts, y = transfer_fees)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(size = 10),  
    plot.subtitle = element_text(size = 8),  
    axis.title.x = element_text(size = 8),  
    axis.title.y = element_text(size = 8)
  ) +
  labs(title = "Average Transfer Spending in Relation to League Points",
       subtitle = paste("Correlation coefficient:", cor_transfers),
       x = "Total League Points",
       y = "Total Transfer Fees")
```

In @fig-pts_vs_average_home_matchday_attendance, @fig-pts_vs_total_wage_bill, @fig-pts_vs_market_value, and @fig-pts_vs_transfer_fees, each point point on the graph represents a team, plotted with their total points on the x-axis and their average home attendance on the y-axis. The trend line in @fig-pts_vs_average_home_matchday_attendance, added using linear regression analysis, suggests a correlation between team performance and matchday turnout. The correlation coefficient of 0.683116662462212 indicates a positive association with moderate correlation, where teams with higher league points tend to have greater average attendance. @fig-pts_vs_total_wage_bill linear regression trend line suggests a correlation between a team’s financial expenditure on payroll and their success in the league. A correlation coefficient of 0.788682340622421 reflects a positive relationship, implying that teams with higher payrolls may be more likely to accumulate greater league points. @fig-pts_vs_market_value demonstrates a pronounced upward trend represented by the linear regression line, with a correlation coefficient of 0.88165690596531, indicative of a strong positive relationship. This suggests that teams with higher market values tend to amass more league points, underlining a potential link between financial strength and on-field success. @fig-pts_vs_transfer_fees trend line indicates a moderate positive correlation, with a correlation coefficient of approximately 0.449012469460392. This suggests that higher league points tend to coincide with increased transfer spending, although the relationship is not strongly linear.

When running simple linear regression with `Points` ~ `Each Dependent Variable`, you're looking at the relationship between each variable in isolation with `Points`. The positive trend and strong correlation coefficients found in @fig-pts_vs_average_home_matchday_attendance, @fig-pts_vs_total_wage_bill, @fig-pts_vs_market_value when analyzed in isolation with `Points`, suggests that as `Market Value`, `Total Payroll`, and `Average Matchday Attendance` of a team increases (independently from each other), so do the points accumulated.

# Model

## Linear Regression

A linear regression model is a statistical model for linear relationships between variables given by

$$
Y_i = \beta_0 + \beta_1 X_{i,1} + \beta_2 X_{i,2} + \ldots + \beta_p X_{i,p} + \varepsilon_i \quad \text{for } i = 1, \ldots, n. \tag{1}
$$

As shown in equation (1) a linear regression model has the following components:

- $Y_i$: The dependent variable for the $i^{th}$ observation. This is the response variable that is trying to be predicted or explained, dependent on the corresponding explanatory variables $X_{i,1}, X_{i,2}, \ldots, X_{i,p}$.

- $\beta_0$: The intercept of the regression line. It represents the expected value of $Y_i$ when all the independent variables ($X$) are equal to 0.

- $\beta_1, \beta_2, \ldots, \beta_p$: The coefficients of the model. Each $\beta_j$ (for $j = 1, \ldots, p$) represents the expected change in $Y_i$ for a one-unit change in the $j^{th}$ independent variable, $X_{i,j}$, holding all other variables constant.

- $X_{i,1}, X_{i,2}, \ldots, X_{i,p}$: The independent variables (also called predictors or explanatory variables) for the $i^{th}$ observation. These variables are used to predict the value of the dependent variable.

- $\varepsilon_i$: The error term for the $i^{th}$ observation. It represents the difference between the observed value of the dependent variable and the value predicted by the model. It's assumed to be randomly distributed with a mean of 0.

- $i = 1, \ldots, n$: This indicates that the equation applies to each observation in the dataset, from the first ($i = 1$) to the $n^{th}$ (the last observation), where $n$ is the total number of observations.

## Model set-up
$$
\begin{split}
\text{pts}_i =\ &\beta_0 + \beta_1 \times \text{average\_home\_matchday\_attendance}_i \\
&+ \beta_2 \times \text{total\_wage\_bill}_i + \beta_3 \times \text{market\_value}_i + \varepsilon_i
\end{split}
\tag{2}
$$

Equation (2) can be explained as follows: 

- $\text{pts}_i$: The dependent variable for the $i^{th}$ observation. This is the outcome variable that the model is trying to predict or explain, which in this context could represent points (or any other metric of success) associated with each observation.

- $\beta_1, \beta_2, \beta_3$: The coefficients of the model. Each of these coefficients represents the expected change in $\text{pts}_i$ for a one-unit increase in their respective independent variable, assuming all other variables are held constant.
    - $\beta_1$ is associated with $\text{average\_home\_matchday\_attendance}_i$, indicating how changes in home matchday attendance are expected to affect $\text{pts}_i$.
    - $\beta_2$ corresponds to $\text{total\_wage\_bill}_i$, reflecting the impact of the total wage bill on $\text{pts}_i$.
    - $\beta_3$ is linked with $\text{market\_value}_i$, showing how the market value is predicted to influence $\text{pts}_i$.

## Model justification

The linear regression model given by Equation (2), derived from the foundational principles of linear regression outlined in Equation (1), provides a transparent mechanism to quantify the impact of various factors on the total points accumulated by EPL teams (a direct correlation to team rank in league standings). The model will aid in gaining insights into how attendance, total payroll, and market value could affect performance metrics. The model is operationalized using the `lm` function in `R`. A strong positive relationship is expected between the dependent variable (`Points`) and three independent variables (`Home Matchday Attendance`, `Total Payroll`, and `Market Value`). The higher the three independent variables are, the more points there should be accumulated by the team.

## Model Prediction

A positive relationship is hypothesized between the dependent variable (`Points`) and the three independent variables (`Home Matchday Attendance`, `Total Payroll`, and `Market Value`). The underlying assumption is that higher values for these independent variables should correlate with an increased number of points earned by a team. Such a correlation would suggest that greater fan engagement (as reflected in matchday attendance), higher investment in player talent (as indicated by the payroll), and a more substantial market presence (denoted by market value) are all strategic levers that could lead to better performance in the league.

# Results {#sec-results}

@tbl-7 shows the table of the coefficients after running the linear model summary.
```{r}
#| echo: false
#| warning: false
#| include: false

model <- lm(pts ~ average_home_matchday_attendance + total_wage_bill + market_value, data = analysis_data)

# Display the summary of the model
model_summary <- summary(model)
print(model_summary)
```

```{r}
#| label: tbl-7
#| tbl-cap: Summary of Linear Model Coefficients
#| echo: false
#| warning: false

model_summary <- summary(model)
coefs <- data.frame(
  Estimate = model_summary$coefficients[, "Estimate"],
  StdError = model_summary$coefficients[, "Std. Error"],
  tValue = model_summary$coefficients[, "t value"],
  Pr = model_summary$coefficients[, "Pr(>|t|)"]
)

kable(coefs, booktabs = TRUE, align = c("l", rep("r", 6)), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 10)

```

Note:
Residuals:
     Min       1Q   Median       3Q      Max 
-10.8121  -6.0644  -0.9837   5.1376  15.9644 

Residual standard error: 8.261 on 16 degrees of freedom
Multiple R-squared:  0.8057,	Adjusted R-squared:  0.7693 
F-statistic: 22.12 on 3 and 16 DF,  p-value: 6.159e-06

The results from the linear regression model indicate a strong relationship between points earned by English Premier League teams and variables such as average home matchday attendance, total wage bill, and market value. The model explains a significant portion of the variability in points, with an $R^2$ value of 0.8057, suggesting that about 80.57% of the variation in team points can be accounted for by these three predictors. Market value is particularly impactful, as indicated by a statistically significant positive coefficient ($p = 0.00151$), suggesting that higher market values are associated with higher points. Conversely, the coefficient for the total wage bill is negative, though not statistically significant, hinting that higher wage bills might not necessarily translate into better performance. This is somewhat surprising, however, results could stem from market value being such a strong predictor that is overshadows the impactfulness of total wage bill. Attendance shows a positive but non-significant impact on points. The model's residuals indicate some deviation from perfect prediction, with values ranging from -10.81 to 15.96, suggesting variability that the model doesn’t capture. Overall, the significant $p$-value for the model (6.159e-06) confirms the effectiveness of these predictors in forecasting league points and therefore the confirmation to move forward in the analysis. 

@tbl-8 shows the actual and predicted performance of English Premier League teams for the 2023-2024. Each row of the table corresponds to a different team and lists three key pieces of information: the team's name, their actual points accumulated in the league as of Matchday 33, and their predicted points, which are calculated based on variables such as home attendance, total payroll, and market value. The teams are sorted by their actual points in descending order, showcasing the teams with higher performance at the top of the table.

```{r}
#| label: tbl-8
#| tbl-cap: Actual vs Predicted Points for English Premier League Teams Based on Home Attendance, Total Payroll, and Market Value, Sorted by Current League Ranking in Descending Order
#| echo: false
#| warning: false

# Predict points using the model
analysis_data$predicted_pts <- predict(model, newdata = analysis_data)

# Selecting the necessary columns and renaming them
result_table <- analysis_data |> 
  select(team, pts, predicted_pts) |>
  rename(Team = team, Points = pts, `Predicted Points` = predicted_pts) |>
  arrange(desc(Points))

# Round predicted points to the nearest whole number
result_table$`Predicted Points` <- round(result_table$`Predicted Points`, 0)

# Format table with LaTeX and apply additional styling
kable(result_table, booktabs = TRUE, align = c("l", "r", "r"), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 10)
```

@fig-actual_pts_vs_predicted_pts compares actual league points as of Matchday 33 of the 2023-2024 English Premier League season to predicted league points. Points predicted by the linear regression model are plotted alongside the points actually obtained by the teams to evaluate the models accuracy. The teams are arranged on the x-axis in descending order of their actual points, and two sets of bars represent the actual (in blue) and predicted (in red) points for each team, allowing for a direct side-by-side comparison between the models predictions and real-world outcomes.
```{r}
#| warning: false
#| echo: false
#| label: fig-actual_pts_vs_predicted_pts
#| fig-cap: A double bar graph comparing the actual and predicted points for teams in the English Premier League.

# Add predicted points to 'analysis_data'
analysis_data$predicted_pts <- predict(model, newdata = analysis_data)

# Prepare the predicted rankings with points
predicted_table <- analysis_data |>
  arrange(desc(predicted_pts)) |>
  mutate(predicted_rank = row_number(), `Predicted Points` = predicted_pts) |>
  select(team, predicted_rank, `Predicted Points`)

# Prepare the actual rankings with points
actual_table <- analysis_data |>
  arrange(desc(pts)) |>
  mutate(actual_rank = row_number(), `Actual Points` = pts) |>
  select(team, actual_rank, `Actual Points`)

# Merge both tables based on team
result_table <- merge(actual_table, predicted_table, by = "team")

# Reorder the team factor levels based on actual points
result_table$team <- with(result_table, reorder(team, -`Actual Points`))

# Reshape data to long format for ggplot after reordering
long_data <- result_table |>
  gather(key = "Type", value = "Points", `Actual Points`, `Predicted Points`)

# Create the double bar graph using the reshaped and ordered data
ggplot(long_data, aes(x = team, y = Points, fill = Type)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.3) +
  scale_fill_manual(values = c("Actual Points" = "blue", "Predicted Points" = "red"),
                    labels = c("Actual Points", "Predicted Points")) +
  labs(title = "Comparison of Actual and Predicted Points for EPL Teams",
       x = "Team",
       y = "Points",
       fill = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6)) +
  theme(legend.position = "top")
```

@tbl-9 presents a comparative analysis of the rankings of English Premier League teams, juxtaposing their actual standings against their predicted standings. The prediction is derived from Equation (2) that incorporates variables such as home attendance, total payroll, and market value. Each row in the table features a rank number, followed by the actual team standing corresponding to that rank, and the predicted team standing that would occupy the same rank based on the model's calculations. This layout allows for a direct comparison of where teams are predicted to stand based on certain metrics versus where they actually stand in the league, highlighting the predictive model's accuracy and identifying discrepancies between expected and actual performances. 
```{r}
#| label: tbl-9
#| tbl-cap: Actual Rank vs Predicted Rank Based on Home Attendance, Total Payroll, and Market Value for English Premier League Teams
#| echo: false
#| warning: false

# Add predicted points to 'analysis_data'
analysis_data$predicted_pts <- predict(model, newdata = analysis_data)

# Prepare the predicted rankings
predicted_table <- analysis_data |>
  arrange(desc(predicted_pts)) |>  # Sort by predicted points in descending order
  mutate(predicted_rank = row_number()) |>  # Assign ranking based on predicted points
  select(team, predicted_rank) |>
  rename(`Predicted Standings` = team, `Predicted Rank` = predicted_rank)

# Prepare the actual rankings
actual_table <- analysis_data |>
  arrange(desc(pts)) |>  # Sort by actual points in descending order
  mutate(actual_rank = row_number()) |>  # Assign ranking based on actual points
  select(team, actual_rank) |>
  rename(`Actual Standings` = team, `Rank` = actual_rank)

# Merge both tables based on rank
result_table <- merge(actual_table, predicted_table, by.x = "Rank", by.y = "Predicted Rank")

# Select only the desired columns: Rank, Actual Standings, and Predicted Standings
final_result <- result_table |>
  select(Rank, `Actual Standings`, `Predicted Standings`)

# Format table with LaTeX and apply additional styling
kable(final_result, booktabs = TRUE, align = c("r", "l", "l"), "latex", longtable = TRUE) |>
  kable_styling(latex_options = c("striped", "HOLD_position"), font_size = 10)
```

The top-performing teams are generally predicted quite accurately, with only slight deviations in rankings regarding the top 10 teams. The top three teams for both actual and predicted are identical. The results also correctly predict the worst teams in the league, accurately predicting the three teams at the bottom of the table, however, in a slightly different order then their actual rank. Although the model does accurately predict the weaker teams in the league, it is evident that the model expected more points to be accumulated by these teams then the actual points accumulated. @fig-actual_rank_vs_predicted_rank visualizes the results of @tbl-9 in a scatter plot.

```{r}
#| warning: false
#| echo: false
#| label: fig-actual_rank_vs_predicted_rank
#| fig-cap: A scatter plot comparing actual and predicted rankings of English Premier League (EPL) teams.

# Add predicted points to 'analysis_data'
analysis_data$predicted_pts <- predict(model, newdata = analysis_data)

# Prepare the predicted rankings
predicted_table <- analysis_data |>
  arrange(desc(predicted_pts)) |>
  mutate(predicted_rank = row_number()) |>
  select(team, predicted_rank)

# Prepare the actual rankings
actual_table <- analysis_data |>
  arrange(desc(pts)) |>
  mutate(actual_rank = row_number()) |>
  select(team, actual_rank)

# Merge both tables
result_table <- merge(actual_table, predicted_table, by = "team", suffixes = c(" Actual", " Predicted"))

# Create a scatter plot with reversed scales and specified breaks
plot <- ggplot(result_table, aes(x = actual_rank, y = predicted_rank, label = team)) +
  geom_point(color = "blue", size = 4) +
  geom_text_repel(size = 2,  # Adjust the size here
                  box.padding = 0.4,  # Add padding around text
                  point.padding = 0.7,  # Add space between text and points
                  segment.color = 'grey50') +  # Color of the line connecting points and labels
  labs(title = "Comparison of Actual vs. Predicted Ranks for EPL Teams",
       x = "Actual Rank",
       y = "Predicted Rank") +
  theme_minimal() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Adds a reference line
  theme(plot.title = element_text(hjust = 0.5)) +
  scale_x_reverse(breaks = 1:20) +  # Reverse X-axis with breaks every 1 increment
  scale_y_reverse(breaks = 1:20)    # Reverse Y-axis with breaks every 1 increment

# Print the plot
print(plot)
```

# Discussion

The application of predictive analytics football, is an expanding field that can provide a competitive edge to clubs. This study aimed to correlate financial factors with team success highlighting the potential of data-driven decision-making in enhancing a team's competitive performance. The significant correlation between a team’s market value and league points serves as evidence of the tangible benefits that can be gained from predictive analytics

The data presented in @sec-results indicates a general correlation between the predicted points, which take into account factors such as home attendance, payroll, and market value, and the actual points achieved by the teams in the English Premier League. As of Matchday 33, Most teams appear to be performing within a close range of their predicted outcomes, suggesting that the model used for predictions is fairly accurate or that most teams are performing as expected given their financial inputs.

The results of the regression analysis underscore the substantial role that economic factors play in the performance of English Premier League teams. The robust association between market value and league points, in particular, confirms the prevailing notion that financial strength translates into competitive success. The unexpected negative coefficient for the total wage bill is one of the most interesting aspect of this analysis. While not statistically significant, the correlation raises questions about the efficiency and return on investment of high player salaries. It hints that simply spending more on player wages does not guarantee better outcomes, highlighting the complexity of financial management in football.

## Analyzing Chelsea F.C.'s Underachievement

Within the predictions lies a couple outliers, with Chelsea F.C. being the most notable. Chelsea's actual points stand at 47, while the model predicted they would have achieved 58 points by Matchday 33. This discrepancy of 11 points is significant and suggests that Chelsea F.C. is underperforming relative to its financial status. As a club known to have a substantial payroll and high market value, and a significant fan base, which are indicators of a team's wealth and resources available for acquiring talent, the expectation would be for Chelsea to secure a position closer to the top of the table.

This outlier status of Chelsea F.C. draws attention and could prompt stakeholders to conduct a deeper analysis into why the club is not meeting the expectations set by its financial prowess. It raises questions about the efficacy of the investments made by the club and whether financial muscle is translating into performance on the pitch as anticipated. 

Chelsea F.C.'s lower-than-expected league points despite its significant financial outlay exemplifies the multifaceted nature of football performance. The discrepancy between predicted and actual points for Chelsea F.C. is one of the largest among all teams, prompting a closer look at factors beyond the economic predictors used in this study. It serves as a reminder that team cohesion, tactical decisions, and possibly non-quantifiable elements such as team spirit and injuries can heavily influence results. As such, Chelsea F.C.'s example could be a launching pad for exploring the non-economic dimensions that interplay with financial resources to shape the fortunes of a football club.

## Analyzing Fulham F.C.'s Overachievement

Despite having relatively modest financial metrics compared to the league's top spenders, Fulham F.C. managed to outperform the projections. Fulham's actual points stand at 42 (12th place), while the model predicted they would have achieved only 31 points (17th place) by Matchday 33. This suggests that Fulham F.C. is outperforming relative to their financial status.

This suggests that their are ways in which other areas of the game besides financial metrics lead to higher league rankings. This could include effective management, coaching, and perhaps strong team cohesion that transcends financial capabilities. Perhaps Fulham's management has excelled this season in areas such as player development, game strategy, and optimizing team dynamics. Management strategies and the coaching staff's ability to maximize player potential and tactical execution on a budget far less then their more successful counterparts could aid other clubs in understanding how to maximize results while minimizing expenditures.

## Weaknesses and next steps

While the linear regression model has demonstrated predictive strength, its limitations must be acknowledged. The study's primary limitation, though intentional, is its exclusive focus on financial predictors to forecast English Premier League performance. While such economic indicators are significant, they represent only a fraction of the factors that influence football outcomes. The model does not account for the strength of the coaching staff, the psychological state of players, injuries, weather conditions during matches, and other situational factors that could affect performance on a match-to-match basis. Furthermore, the analysis does not take into account the total payroll of coaching and managing staff, it strictly looks at players. 

Another limitation is the scope of the study, which is restricted to the current season. This narrow time frame does not allow for the analysis of trends or the examination of the persistence of the identified relationships across different seasons. Football is a dynamic sport where teams' fortunes can fluctuate drastically from year to year; hence, a multi-season approach would most likely yield more robust insights.

The sample size, constrained to the current teams in the Premier League for a single season, poses a further limitation. The relatively small dataset may not capture the full variability and could potentially overestimate or underestimate the effects of the predictors. Larger datasets that span multiple seasons and include teams from different tiers of English football might provide a more comprehensive view of the financial dynamics at play.

The results of the current analysis could lead to an intriguing dimension of financial investment in European football as the next steps: the potential long-term benefits of allocating financial resources to youth development programs. While this analysis primarily examines current and direct financial factors of team success, there is growing evidence to suggest that investments in youth academies and development programs can be equally pivotal for sustained success. 

\newpage

\appendix

# Appendix {-}

# Model details {#sec-model-details}

## Model Summary
```{r}
#| warning: false
#| echo: false

model <- lm(pts ~ average_home_matchday_attendance + total_wage_bill + market_value, data = analysis_data)

# Display the summary of the model
model_summary <- summary(model)
print(model_summary)
```

## Posterior predictive check

@fig-fosterior_predictive_check Conduct a simulation-based approach to assess how well the model can predict new data. First new datasets were created by adding randomly sampled residuals (differences between observed and model-predicted values) to the fitted values from the model. Sampling residuals allows me to include the natural variability and error structure of the model in the simulated data. I do this many times (1000 simulations), each time generating a full set of predicted points based on your model but incorporating different sampled residuals. Then calculate the mean and quantile intervals (e.g., 95% confidence intervals) for these simulated points. These statistics are used to see how the simulated data (predictions) compare against the actual data. Mean of simulations represents the average predicted points from all simulations for each team. Confidence intervals give a range where you expect the true value of the teams points to fall, based on the models predictions and its inherent uncertainty. The final step involves plotting the actual points against the mean of the simulated points for each team. This visualization checks model validity. If the model is good, most actual points should lie within the plotted confidence intervals of the simulated means. It also assesses prediction accuracy. The closer these points lie along the diagonal line (where actual equals predicted), the better your model is at accurately predicting the points.

```{r}
#| warning: false
#| echo: false
#| label: fig-fosterior_predictive_check
#| fig-cap: Conducting a simulation-based approach to assess how well the model can predict new data.

# Fit the linear regression model
model <- lm(pts ~ average_home_matchday_attendance + total_wage_bill + market_value, data = analysis_data)

# Simulate posterior predictive data
set.seed(123)  # for reproducibility
n_simulations <- 1000
simulated_pts <- replicate(n_simulations, {
  # Generate new response data by adding fitted values and sampled residuals
  simulated_resid <- sample(residuals(model), size = length(fitted(model)), replace = TRUE)
  fitted(model) + simulated_resid
})

# Calculate the mean and quantiles of the simulations for plotting
simulated_mean <- rowMeans(simulated_pts)
simulated_lower <- apply(simulated_pts, 1, quantile, probs = 0.025)
simulated_upper <- apply(simulated_pts, 1, quantile, probs = 0.975)

# Create a data frame for plotting
posterior_data <- data.frame(
  Team = rownames(analysis_data),
  Actual = analysis_data$pts,
  Fitted = fitted(model),
  SimulatedMean = simulated_mean,
  Lower95CI = simulated_lower,
  Upper95CI = simulated_upper
)

# Plot actual vs. simulated data
ggplot(posterior_data, aes(x = Actual, y = SimulatedMean)) +
  geom_point(alpha = 0.5) +
  geom_errorbar(aes(ymin = Lower95CI, ymax = Upper95CI), width = 0.1, alpha = 0.5) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
  labs(x = "Actual Points", y = "Simulated Mean Points", title = "Posterior Predictive Check") +
  theme_minimal()

```

## Diagnostics

```{r}
#| warning: false
#| echo: false

library(ggplot2)
library(car)
library(lmtest)
library(nortest)
library(ggfortify)

# Fit the model
model <- lm(pts ~ average_home_matchday_attendance + total_wage_bill + market_value, data = analysis_data)

# Residuals vs Fitted
# This plot helps check for non-linear patterns and equal variance
ggplot2::autoplot(model, which = 1)

# Normal Q-Q Plot
# This plot helps check the normality of residuals
ggplot2::autoplot(model, which = 2)

# Scale-Location Plot (Spread-Location)
# This plot helps check for homoscedasticity
ggplot2::autoplot(model, which = 3)

# Residuals vs Leverage Plot
# This helps identify influential cases
ggplot2::autoplot(model, which = 5)

# Additional Diagnostics

# Test for Autocorrelation of residuals (Durbin-Watson test)
dwtest(model)

# Test for Normality of Residuals (Anderson-Darling test)
ad.test(residuals(model))

# Variance Inflation Factor (VIF) - checks for multicollinearity
vif(model)  # from the car package

# Print results
print(dwtest(model))
print(ad.test(residuals(model)))
print(vif(model))
```

\newpage


# References


